#!/usr/bin/env node

import { spawn, execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');

// È¢úËâ≤ÂÆö‰πâ
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function getVersion() {
  try {
    const packagePath = join(projectRoot, 'package.json');
    const packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));
    return packageJson.version;
  } catch (error) {
    return '0.0.1';
  }
}

function showHelp() {
  log('blue', 'üöÄ CMMI Specs MCP CLI');
  console.log('');
  console.log('Áî®Ê≥ï:');
  console.log('  npx cmmi-specs-mcp <command> [options]');
  console.log('');
  console.log('ÂëΩ‰ª§:');
  console.log('  help       ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ');
  console.log('  version    ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ');
  console.log('  config     ÊòæÁ§∫ÈÖçÁΩÆ‰ø°ÊÅØ');
  console.log('  install    ÂÆâË£ÖMCPÊúçÂä°Âô®');
  console.log('  install-vscode  ÂÆâË£ÖVS CodeÈÖçÁΩÆ');
  console.log('  start      ÂêØÂä®MCPÊúçÂä°Âô®');
  console.log('  build      ÊûÑÂª∫È°πÁõÆ');
  console.log('  test       ËøêË°åÊµãËØï');
  console.log('  validate   È™åËØÅÈÖçÁΩÆ');
  console.log('');
  console.log('Á§∫‰æã:');
  console.log('  npx cmmi-specs-mcp install');
  console.log('  npx cmmi-specs-mcp start');
  console.log('  npx cmmi-specs-mcp test');
}

function showConfig() {
  log('blue', 'üìã ÈÖçÁΩÆ‰ø°ÊÅØ');
  console.log(`  È°πÁõÆÊ†πÁõÆÂΩï: ${projectRoot}`);
  console.log(`  ÁâàÊú¨: ${getVersion()}`);
  console.log(`  MCPÊúçÂä°Âô®: ${join(projectRoot, 'mcp-server')}`);
  console.log(`  ÈÖçÁΩÆÁõÆÂΩï: ${join(projectRoot, 'configs')}`);
  console.log(`  ‰ª£ÁêÜÁõÆÂΩï: ${join(projectRoot, 'agents')}`);
  console.log(`  ÊñáÊ°£ÁõÆÂΩï: ${join(projectRoot, 'docs')}`);
}

async function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    const child = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      cwd: options.cwd || projectRoot,
      ...options
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve(code);
      } else {
        reject(new Error(`Command failed with exit code ${code}`));
      }
    });

    child.on('error', (error) => {
      reject(error);
    });
  });
}

async function installMCP() {
  log('blue', 'üîß ÂÆâË£ÖMCPÊúçÂä°Âô®...');
  try {
    await runCommand('bash', [join(projectRoot, 'install-mcp.sh')]);
    log('green', '‚úÖ MCPÊúçÂä°Âô®ÂÆâË£ÖÂÆåÊàê');
  } catch (error) {
    log('red', `‚ùå MCPÊúçÂä°Âô®ÂÆâË£ÖÂ§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

async function installVSCode() {
  log('blue', 'üîß ÂÆâË£ÖVS CodeÈÖçÁΩÆ...');
  try {
    await runCommand('bash', [join(projectRoot, 'install-vscode.sh')]);
    log('green', '‚úÖ VS CodeÈÖçÁΩÆÂÆâË£ÖÂÆåÊàê');
  } catch (error) {
    log('red', `‚ùå VS CodeÈÖçÁΩÆÂÆâË£ÖÂ§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

async function startServer() {
  // Âú®MCPÊ®°Âºè‰∏ã‰∏çËæìÂá∫‰ªª‰ΩïÊó•ÂøóÔºåÈÅøÂÖçÂπ≤Êâ∞VS CodeÁöÑMCPÂçèËÆÆËß£Êûê
  // log('blue', 'üöÄ ÂêØÂä®MCPÊúçÂä°Âô®...');
  try {
    await runCommand('node', [join(projectRoot, 'mcp-server/dist/server.js')]);
  } catch (error) {
    // Âè™Âú®ÈîôËØØÊó∂ËæìÂá∫Âà∞stderrÔºå‰∏çÂΩ±ÂìçstdoutÁöÑMCPÂçèËÆÆÈÄö‰ø°
    console.error(`‚ùå ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

async function buildProject() {
  log('blue', 'üî® ÊûÑÂª∫È°πÁõÆ...');
  try {
    await runCommand('npm', ['run', 'build']);
    log('green', '‚úÖ È°πÁõÆÊûÑÂª∫ÂÆåÊàê');
  } catch (error) {
    log('red', `‚ùå È°πÁõÆÊûÑÂª∫Â§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

async function runTests() {
  log('blue', 'üß™ ËøêË°åÊµãËØï...');
  try {
    await runCommand('bash', [join(projectRoot, 'tests/verify-mcp.sh')]);
    log('green', '‚úÖ ÊµãËØïÂÆåÊàê');
  } catch (error) {
    log('red', `‚ùå ÊµãËØïÂ§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

async function validate() {
  log('blue', '‚úÖ È™åËØÅÈÖçÁΩÆ...');
  try {
    await runCommand('bash', [join(projectRoot, 'tests/verify-mcp.sh')]);
    log('green', '‚úÖ ÈÖçÁΩÆÈ™åËØÅÂÆåÊàê');
  } catch (error) {
    log('red', `‚ùå ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

// ‰∏ªÂáΩÊï∞
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (!command || command === 'help' || command === '-h' || command === '--help') {
    showHelp();
    return;
  }

  switch (command) {
    case 'version':
    case '-v':
    case '--version':
      console.log(`cmmi-specs-mcp v${getVersion()}`);
      break;

    case 'install':
      await installMCP();
      break;

    case 'install-vscode':
      await installVSCode();
      break;

    case 'start':
      await startServer();
      break;

    case 'build':
      await buildProject();
      break;

    case 'test':
      await runTests();
      break;

    case 'validate':
      await validate();
      break;

    case 'config':
      showConfig();
      break;

    default:
      log('red', `‚ùå Êú™Áü•ÂëΩ‰ª§: ${command}`);
      console.log('‰ΩøÁî® "npx cmmi-specs-mcp help" Êü•ÁúãÂ∏ÆÂä©');
      process.exit(1);
  }
}

// ÈîôËØØÂ§ÑÁêÜ
process.on('uncaughtException', (error) => {
  log('red', `‚ùå Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏: ${error.message}`);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  log('red', `‚ùå Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù: ${reason}`);
  process.exit(1);
});

// ÊâßË°å‰∏ªÂáΩÊï∞
main().catch((error) => {
  log('red', `‚ùå ÊâßË°åÂ§±Ë¥•: ${error.message}`);
  process.exit(1);
});
